{"version":3,"sources":["api.js","components/Player.js","components/Utilities.js","components/Volume.js","App.js","serviceWorker.js","index.js"],"names":["handleKeyPress","key","a","fetch","console","log","Player","Grid","columns","Row","verticalAlign","Column","size","type","onPress","Utilities","Volume","App","className","Container","style","marginTop","position","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAAaA,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACvBC,MAAM,iBAAD,OAAkBF,IADA,OAG7BG,QAAQC,IAAR,gBAAqBJ,IAHQ,2CAAH,sDCYdK,EAAS,WACrB,OACC,kBAACC,EAAA,EAAD,CAAMC,QAAQ,SACb,kBAACD,EAAA,EAAKE,IAAN,CAAUC,cAAc,OACvB,kBAACH,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCC,KAAK,QACLC,KAAK,YACLC,QAAS,kBAAMd,EAAe,QAE9B,kBAAC,IAAD,CAAcY,KAAM,QAIvB,kBAACL,EAAA,EAAKE,IAAN,CAAUC,cAAc,UACvB,kBAACH,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCC,KAAK,QACLC,KAAK,YACLC,QAAS,kBAAMd,EAAe,UAE9B,kBAAC,IAAD,CAAeY,KAAM,OAGvB,kBAACL,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCC,KAAK,QACLC,KAAK,YACLC,QAAS,kBAAMd,EAAe,eAE9B,kBAAC,IAAD,CAASY,KAAM,OAGjB,kBAACL,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCC,KAAK,QACLC,KAAK,YACLC,QAAS,kBAAMd,EAAe,WAE9B,kBAAC,IAAD,CAAgBY,KAAM,QAIzB,kBAACL,EAAA,EAAKE,IAAN,CAAUC,cAAc,UACvB,kBAACH,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCC,KAAK,QACLC,KAAK,YACLC,QAAS,kBAAMd,EAAe,UAE9B,kBAAC,IAAD,CAAcY,KAAM,U,QCvDbG,EAAY,WACxB,OACC,kBAACR,EAAA,EAAD,KACC,kBAACA,EAAA,EAAKE,IAAN,CAAUD,QAAS,GAClB,kBAACD,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCE,KAAK,UACLC,QAAS,kBAAMd,EAAe,iBAE9B,kBAAC,IAAD,CAAcY,KAAM,OAGtB,kBAACL,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CACCE,KAAK,WAGL,kBAAC,IAAD,CAAoBD,KAAM,U,QClBnBI,EAAS,WACrB,OACC,kBAACT,EAAA,EAAD,CAAMC,QAAQ,SACb,kBAACD,EAAA,EAAKE,IAAN,KACC,kBAACF,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CAAeG,QAAS,kBAAMd,EAAe,YAC5C,kBAAC,IAAD,CAAQY,KAAM,QAIjB,kBAACL,EAAA,EAAKE,IAAN,KACC,kBAACF,EAAA,EAAKI,OAAN,KACC,kBAAC,gBAAD,CAAeG,QAAS,kBAAMd,EAAe,cAC5C,kBAAC,IAAD,CAASY,KAAM,UCONK,MAnBf,WACI,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,KAC3B,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAACF,EAAA,EAAD,CACIC,MAAO,CACHE,SAAU,WACVC,IAAK,MAGT,kBAAC,EAAD,SCRIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"js/main.444ea3ab.chunk.js","sourcesContent":["export const handleKeyPress = async (key) => {\n\tawait fetch(`/keypress?key=${key}`)\n\n\tconsole.log(`Key : ${key}`)\n};\n","import React from \"react\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport { Grid } from \"semantic-ui-react\";\nimport {\n\tMdChevronLeft,\n\tMdChevronRight,\n\tMdExpandMore,\n\tMdExpandLess,\n\tMdPause\n} from \"react-icons/md\"\nimport { handleKeyPress } from \"../api\";\n\nexport const Player = () => {\n\treturn (\n\t\t<Grid columns=\"equal\">\n\t\t\t<Grid.Row verticalAlign=\"top\">\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\ttype=\"secondary\"\n\t\t\t\t\t\tonPress={() => handleKeyPress(\"up\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MdExpandLess size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t\t<Grid.Row verticalAlign=\"middle\">\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\ttype=\"secondary\"\n\t\t\t\t\t\tonPress={() => handleKeyPress(\"left\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MdChevronLeft size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\ttype=\"secondary\"\n\t\t\t\t\t\tonPress={() => handleKeyPress(\"playpause\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MdPause size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\ttype=\"secondary\"\n\t\t\t\t\t\tonPress={() => handleKeyPress(\"right\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MdChevronRight size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t\t<Grid.Row verticalAlign=\"bottom\">\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\ttype=\"secondary\"\n\t\t\t\t\t\tonPress={() => handleKeyPress(\"down\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MdExpandMore size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t</Grid>\n\t);\n};\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport { FaVolumeMute } from \"react-icons/fa\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport { MdPowerSettingsNew } from \"react-icons/md\";\nimport { handleKeyPress } from \"../api\";\n\nexport const Utilities = () => {\n\treturn (\n\t\t<Grid>\n\t\t\t<Grid.Row columns={2}>\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\tonPress={() => handleKeyPress(\"toggle_mute\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<FaVolumeMute size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton\n\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t// onPress={() => handleKeyPress(\"poweroff\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MdPowerSettingsNew size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t</Grid>\n\t);\n};\n","import React from \"react\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport { TiMinus, TiPlus } from \"react-icons/ti\";\nimport { Grid } from \"semantic-ui-react\";\nimport { handleKeyPress } from \"../api\";\n\nexport const Volume = () => {\n\treturn (\n\t\t<Grid columns=\"equal\">\n\t\t\t<Grid.Row>\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton onPress={() => handleKeyPress(\"vol_up\")}>\n\t\t\t\t\t\t<TiPlus size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t\t<Grid.Row>\n\t\t\t\t<Grid.Column>\n\t\t\t\t\t<AwesomeButton onPress={() => handleKeyPress(\"vol_down\")}>\n\t\t\t\t\t\t<TiMinus size={20} />\n\t\t\t\t\t</AwesomeButton>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t</Grid>\n\t);\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\nimport { Player } from \"./components/Player\";\nimport { Utilities } from \"./components/Utilities\";\nimport { Volume } from \"./components/Volume\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Container style={{ marginTop: 40 }}>\n                <Utilities />\n                <Volume />\n            </Container>\n            <Container\n                style={{\n                    position: \"relative\",\n                    top: 100,\n                }}\n            >\n                <Player />\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-awesome-button/dist/themes/theme-eric.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}